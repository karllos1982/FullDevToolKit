@page "/"
@page "/home"
@page "/login"

@inherits MainLayout
@layout MainLayout

@inject IJSRuntime JSRuntime
@inject IAppControllerAsync<UserAuthenticated> _appctrl
@inject IAuthProxyManager _authservices
@inject IAppSettings _settings
@inject NavigationManager NavigationManager
@inject HttpClient _httpclient

<PageTitle>Login</PageTitle>

<div class="d-flex flex-column flex-root" id="kt_app_root">
			    
  @if (user != null && texts != null)
    {
    <div class="d-flex flex-column flex-lg-row flex-column-fluid">	
	<div class="d-flex flex-lg-row-fluid">		
		<div class="d-flex flex-column flex-center pb-0 pb-lg-10 p-10 w-100">
                    <img class="theme-light-show mx-auto mw-100 w-150px w-lg-300px mb-10 mb-lg-20" src="assets/images/auth-screens.png" alt="" />			
                 <h1 class="text-gray-800 fs-2qx fw-bold text-center mb-7">@texts.Get("Welcome-Label")</h1>
                 <div class="text-gray-600 fs-base text-center fw-semibold">
				
			     </div>			
		</div>		
	</div>
	
	<div class="d-flex flex-column-fluid flex-lg-row-auto justify-content-center justify-content-lg-end p-12">		
		<div class="bg-body d-flex flex-column flex-center rounded-4 w-md-600px p-10">			
			<div class="d-flex flex-center flex-column align-items-stretch h-lg-100 w-md-400px">				
				<div class="d-flex flex-center flex-column flex-column-fluid pb-15 pb-lg-20">					
					<div class="form w-100" >						
						<div class="text-center mb-11">
                                    <h1 class="text-dark fw-bolder mb-3">@texts.Get("LoginTitle-Label")</h1>
                            <div class="text-gray-500 fw-semibold fs-6">@texts.Get("LoginTitle-Description")</div>
                        </div>						
												
						<div class="fv-row mb-8">							
                            <input type="email" @bind-value=@user.Email class="form-control bg-transparent"
                                   maxlength="100" placeholder=@texts.Get("InputEmail-Description")>							
							
						</div>						
						<div class="fv-row mb-3">
                            <input type="password" @bind-value=@pwd class="form-control bg-transparent"
                                   maxlength="10" placeholder=@texts.Get("InputPassword-Description")>
							
						</div>						
						<div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
							<div></div>
                            <a @onclick="RecoveryPassword" class="link-primary a-link">
                                @texts.Get("ForgetPassword-Description")</a>
														
						</div>
						
						<div class="d-grid mb-10">
                            <TaskButton @ref="loginbtn" Title=@texts.Get("LoginButton-Label")
                                        ActionLabel=@texts.Get("LoginLoading-Label") OnClick="ExecuteLogin">
                            </TaskButton>

                            <TaskLoading @ref="loadingPwd" Title=@texts.Get("SendText-Description")></TaskLoading>
						</div>
						
						<div class="text-gray-500 text-center fw-semibold fs-6">
                            <a @onclick="ShowActiveModal" class="link-primary a-link">
                                @texts.Get("ActiveAccountButton-Label")</a>
						</div>						
					</div>					
				</div>			
            </div>			
		</div>		
	</div>	
</div>

    }
   

</div>

<MessageBox @ref="msgbox"></MessageBox>

@if (texts != null)
{
    <Modal @ref="modalRef"  >
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@texts.Get("ActiveAccount-Label")</ModalTitle>
                <CloseButton></CloseButton>
            </ModalHeader>
            <ModalBody>

                <div class="row">
                    <div class="col-md-9">                    
                        <h5>1. @texts.Get("ActiveAccount-Step1"):</h5>					
                        <input type="email" @bind-value=@active.Email class="form-control bg-transparent" maxlength="100"
                           placeholder=@texts.Get("InputEmail-Description")>
                    </div>

                    <div class="col-md-3">    
                        <br/>
                        <TaskButton @ref="sendcodebtn" OnClick="SendActiveAccountCode" 
                                Title=@texts.Get("SendCodeButton-Label")
                                ActionLabel=@texts.Get("SendText-Description")></TaskButton>
                    </div>
                </div>

                <div class="row" style="margin-top:20px">
                    <div class="col-md-9">
                        <h5>2. @texts.Get("ActiveAccount-Step2"):</h5>
                        <input type="text" @bind-value=@active.Code class="form-control bg-transparent" maxlength="20"
                           placeholder=@texts.Get("InputCode-Description")>
                    </div>

                    <div class="col-md-3">  
                        <br/>
                        <TaskButton @ref="activebtn" Title=@texts.Get("ActiveAccountButton-Label") OnClick="ActivateAccount"
                                ActionLabel=@texts.Get("ActiveLoading-Label")></TaskButton>

                    </div>

                </div>         

            </ModalBody>      
        </ModalContent>
    </Modal>
}

@code {

    private Modal modalRef;
    private UserLogin user = new UserLogin();
    private string pwd = "";
    private ActiveUserAccount active = new ActiveUserAccount();
    private MessageBox msgbox;
    private TaskButton loginbtn;
    private TaskButton activebtn;
    private TaskButton sendcodebtn;    
    private TaskLoading loadingPwd;
    private bool islogged = false;

    private DefaultLocalization texts = null;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void InitResources()
    {

        ((MyAppController)_appctrl).Settings = _settings;

        _authservices.Init(_httpclient,_settings.ServiceURL,"");


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                this.InitResources();
                string url = _settings.SiteURL;
                
                APIResponse<List<LocalizationTextResult >?> response
                    = await ((AuthProxy)_authservices).ListLocalizationTexts();

                if (response.IsSuccess)
                {
                    this.texts = new DefaultLocalization();
                    this.texts.Set(response.Data, _settings.DefaultLanguage);
                }
                
                islogged = await _appctrl.IsAuthenticated();

                if (islogged)
                {
                    await _appctrl.GetSession();

                    UserAuthenticated usr = _appctrl.UserInfo;

                    url = _settings.SiteURL + "/" + usr.HomeURL;
                    NavigationManager.NavigateTo(url);
                }
            }
            catch(Exception ex)
            {

            }

            StateHasChanged();
        }

    }

    private async Task ExecuteLogin()
    {

        try
        {   
            this.InitResources();                

            if (user.Email != null && pwd != null)
            {

                user.Password = FullDevToolKit.Helpers.Utilities.ConvertToBase64(pwd); 

                loginbtn.Begin();

                ExecutionStatus ret = await _appctrl.Login(_authservices, user);

                if (ret.Success)
                {
                    UserAuthenticated user = (UserAuthenticated)ret.Returns;
                    string url = _settings.SiteURL + "/"+ user.HomeURL;
                    NavigationManager.NavigateTo(url);                    
                }
                else
                {                    
                    await  msgbox.ShowDialog(texts.Get("NoticeLabel"), ret.Exceptions.Messages[0].Description);
                }

            }
            else
            {                
                await msgbox.ShowDialog(texts.Get("InvalidCredentials-Title"), texts.Get("InvalidCredentials-Message"));
            }
        }
        catch(Exception ex)
        {            
            await msgbox.ShowDialog(texts.Get("NoticeLabel"), ex.Message);
        }       

        loginbtn.End();

    }

    private async Task  RecoveryPassword()
    {
        InitResources();


        if (user.Email != null)
        {

            await loadingPwd.Begin();

            AuthProxy proxy = (AuthProxy)_authservices;

            APIResponse<bool> response 
                = await proxy.RecoveryPassword(user.Email);

            if (response.IsSuccess)
            {
                await msgbox.ShowDialog(texts.Get("TemporaryPassword-Title"),
                    texts.Get("TemporaryPassword-Message"));
            }
            else
            { 
                await msgbox.ShowDialog(texts.Get("NoticeLabel"), response.Exceptions.Messages[0].Description);
            }         

             await loadingPwd.End();
        }
        else
        {

            await msgbox.ShowDialog(texts.Get("NoticeLabel"), texts.Get("InputEmail-Description"));
        }

    }

    private async Task SendActiveAccountCode()
    {
        this.InitResources();

        if (active.Email != null)
        {
            sendcodebtn.Begin();

            AuthProxy proxy = (AuthProxy)_authservices;

            APIResponse<bool> response
                = await proxy.RequestActiveAccountCode(user.Email);
           
            if (response.IsSuccess)
            {
                await msgbox.ShowDialog(texts.Get("ActivateCode-Title"), texts.Get("ActivateCode-Message"));
            }
            else
            {             
                await msgbox.ShowDialog(texts.Get("NoticeLabel"), response.Exceptions.Messages[0].Description);
            }
            sendcodebtn.End();
        }
        else
        {
            await msgbox.ShowDialog(texts.Get("NoticeLabel"), texts.Get("InputEmail-Description"));

        }

        await modalRef.Hide();      

    }

    private async Task ActivateAccount()
    {
        this.InitResources();

        if (active.Code != null)
        {
            activebtn.Begin();

            AuthProxy proxy = (AuthProxy)_authservices;

            APIResponse<bool> response
                = await proxy.ActiveAccount(active);
               

            if (response.IsSuccess)
            {
                await msgbox.ShowDialog(texts.Get("SuccessActivated-Title"), texts.Get("SuccessActivated-Message"));
            }
            else
            {                
                await msgbox.ShowDialog(texts.Get("NoticeLabel"), response.Exceptions.Messages[0].Description);
            }

            activebtn.End();
        }
        else
        {
            await msgbox.ShowDialog(texts.Get("NoticeLabel"), texts.Get("InputCode-Description"));

        }

        await modalRef.Hide();   
        
    }

      

    private async Task ShowActiveModal()
    {
        await modalRef.Show();      
        
    }

}