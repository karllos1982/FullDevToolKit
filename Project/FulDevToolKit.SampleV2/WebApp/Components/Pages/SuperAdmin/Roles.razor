@page "/superadmin/roles"

@inherits LoggedLayout
@layout LoggedLayout

@inject NavigationManager NavigationManager
@inject HttpClient _httpclient
@inject IAppControllerAsync<UserAuthenticated> _appctrl
@inject IAppSettings _settings
@inject IDataCacheProxyManager _cache
@inject ISystemProxyManager _systemservices
@inject IDialogService msgbox

            

@if (view != null)
{
    

    <FluentGrid Spacing="3" AdaptiveRendering="true" Style="padding: 4px; ">
                
        <FluentGridItem lg="6" xs="12">
                <FluentLabel> <h2> @_PageTitle</h2> </FluentLabel>
            </FluentGridItem>

     </FluentGrid>


        @if (!view.GetTabEditState())
        {                             
            <FluentGrid  Spacing="1" AdaptiveRendering="true" Style="padding: 4px; ">

             
                <FluentGridItem lg="12" xs="12" >

                    <FluentCard Width="100%" Height="100%" >
                        
                        <FluentGridItem xs="12">
                            <FluentLabel> <h5>@view.texts.Get("SearchButtonLabel")</h5> </FluentLabel>

                        </FluentGridItem>

                        <FluentGridItem xs="12">

                            <FluentTextField @bind-Value=view.param.pRoleName Maxlength="100"
                                                Label="@view.texts.Get("SearchByRoleName-Label")" style="width:100%">
                            </FluentTextField>

                        </FluentGridItem>

                        <FluentGridItem xs="12">

                            <TaskButton OnClick="OnSearch"
                                        Title=@view.texts.Get("SearchButtonLabel")
                                        Disabled=!view.Permissions.AllowRead
                                        ButtonAppearance="Appearance.Accent"
                                        IconEnd="@(new Icons.Regular.Size20.Search())"
                                        ActionLabel=@view.texts.Get("SearchingLabel")>
                            </TaskButton>

                        </FluentGridItem>


                    </FluentCard>

                 </FluentGridItem>


                <FluentGridItem xs="12">
                    
                    <FluentLabel> <h5>@view.texts.Get("SearchResultLabel")</h5> </FluentLabel>

                </FluentGridItem>

                <FluentGridItem lg="12" xs="12">

                    <FluentCard Width="100%" Height="100%">



                    </FluentCard>

                </FluentGridItem>

        </FluentGrid>
        }            

}
else
{

    <FluentStack Style="margin-bottom: 24px;"
                    VerticalAlignment="VerticalAlignment.Center"
                    HorizontalAlignment="HorizontalAlignment.Center">
        <PageLoading LoadingText="Loading page. Wait..."></PageLoading>

    </FluentStack>

}
      


@code {

    string? activeid = "tab-searching";

    private RoleViewModel view;

    //



    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            if (await this.InitResources())
            {
                await this.InitCacheAndLocalization();

                this.InitServices();

                view = new RoleViewModel((_systemservices as SystemProxy),
                   (_cache as DataCacheProxy), user, _httpclient, _settings.ServiceURL, _appctrl.UserInfo.Token);

                view.texts = this.localization;

                view.Permissions
                    = BaseViewModel.SetPermissions(permissions, "SYSROLE", false);

                await view.InitializeModels();

                _LoadingData_Text = view.texts.Get("LoadingData");                
                _AreaURL = "superadmin"; 
                _msgYes = view.texts.Get("Yes-Text");
                _msgNo = view.texts.Get("No-Text");
                this.SetPageTile(view.texts.Get("Role-PageTitle"));
            }

            StateHasChanged();

        }
    }



    public async Task OnSearch()
    {        
        await view.Search();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("ErrorOnExecuteSearch"));

        }
        
    }

    public void OnNew()
    {

        view.InitNew();
        StateHasChanged();
    }

    public async Task OnGet(object id)
    {
        await loading.Begin();

        await view.Get(id);

        await loading.End();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("ErrorOnReturnData"));
            
        }
        else
        {
            view.InitEdit();

        }

        StateHasChanged();
    }


    public async Task OnSet()
    {
        
        await view.Set();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("NoticeLabel"));
            
        }
        else
        {
            await msgbox.ShowSuccessAsync(view.texts.Get("SuccessSaveMessage"),
                view.texts.Get("SuccessLabel"));                             
            
                this.Back();            

        }
  

    }

    public async Task OnDetClick(object id)
    {
        await OnGet(id);

    }

    public void Back()
    {
        view.BackToSearch();
        StateHasChanged();

    }

    public void GoHome()
    {
        string url = _appctrl.UserInfo.HomeURL;
        NavigationManager.NavigateTo(url);

    }



}