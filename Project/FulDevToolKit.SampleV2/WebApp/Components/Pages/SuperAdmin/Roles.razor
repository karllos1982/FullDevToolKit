@page "/superadmin/roles"

@inherits LoggedLayout
@layout LoggedLayout

@inject NavigationManager NavigationManager
@inject HttpClient _httpclient
@inject IAppControllerAsync<UserAuthenticated> _appctrl
@inject IAppSettings _settings
@inject IDataCacheProxyManager _cache
@inject ISystemProxyManager _systemservices
@inject IDialogService msgbox

            

@if (view != null)
{
    
    <FluentGrid Spacing="3" AdaptiveRendering="true" Style="padding: 4px; ">
                
        <FluentGridItem lg="10" xs="12">
                <FluentLabel> <h2> @_PageTitle</h2> </FluentLabel>
                                 
        </FluentGridItem>

        <FluentGridItem lg="2" xs="12"  Style="margin-top: 6px;">

            <TaskButton OnClick="OnNew" Visible="!view.GetTabEditState()"
                        Title=@view.texts.Get("NewRole-Label")
                        Disabled=!view.Permissions.AllowSave                        
                        IconEnd="@(new Icons.Regular.Size20.AddCircle())"
                        ButtonAppearance="Appearance.Accent">

            </TaskButton>

            <TaskButton OnClick="OnSet" Visible="view.GetTabEditState()"
                        Title=@view.texts.Get("SaveRoleButton-Label")
                        Disabled=!view.Permissions.AllowSave
                        IconEnd="@(new Icons.Regular.Size24.SaveEdit())"
                        ButtonAppearance="Appearance.Accent">

            </TaskButton>

        </FluentGridItem>

     </FluentGrid>


        @if (!view.GetTabEditState())
        {                             
            <FluentGrid  Spacing="1" AdaptiveRendering="true" Style="padding: 4px; ">
             
                <FluentGridItem lg="12" xs="12" >

                    <FluentAccordion >

                        <FluentAccordionItem Expanded="true"  Heading="@view.texts.Get("SearchButtonLabel")">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Search())"
                                        Color="@Color.Accent" Slot="start"  />

                            <FluentStack Style="margin-bottom: 20px;" Orientation="Orientation.Vertical"
                                            VerticalAlignment="VerticalAlignment.Center">

                                <FluentTextField @bind-Value=view.param.pRoleName Maxlength="100"
                                                    Label="@view.texts.Get("SearchByRoleName-Label")" style="width:50%">
                                </FluentTextField>

                                <TaskButton OnClick="OnSearch"
                                            Title=@view.texts.Get("SearchButtonLabel")
                                            Disabled=!view.Permissions.AllowRead
                                            ButtonAppearance="Appearance.Accent"                                        
                                            ActionLabel=@view.texts.Get("SearchingLabel")>
                                </TaskButton>


                            </FluentStack>

                        </FluentAccordionItem>                    
                    </FluentAccordion>         
                </FluentGridItem>
             

                <FluentGridItem lg="12" xs="12">

                    <FluentCard Width="100%" Height="100%" Class="card-layout">
                                           
                            <FluentLabel> <h5>@view.texts.Get("SearchResultLabel")</h5> </FluentLabel>

                            <div id="datagrid-container">
                                    <FluentDataGrid Items="@view.gridlist"   TGridItem="RoleResult"
                                                Pagination="@pagination"
                                                RowSize="@rowSize"
                                                AutoItemsPerPage="true"
                                                Style="overflow-y:hidden;">

                                    <PropertyColumn Property="@(c => c.RoleName)" Title="@view.texts.Get("RoleName-Label")" Sortable="true" />
                                    <PropertyColumn Property="@(c => c.IsActive)" Title="@view.texts.Get("Active-Label")" Sortable="true" />

                                    <TemplateColumn>
                                
                                         <FluentButton Appearance="Appearance.Lightweight" 
                                              IconEnd="@(new Icons.Regular.Size24.ClipboardTextEdit())"
                                              @onclick="@(() => OnDetClick(context.RoleID))">
                                            </FluentButton>
                                        
                                    </TemplateColumn>

                                </FluentDataGrid>
                            </div>

                            <FluentPaginator State="@pagination"  />
                                                     
                    </FluentCard>
                </FluentGridItem>

        </FluentGrid>
        }            

        @if (view.GetTabEditState())
        {
            <FluentGrid Spacing="3" AdaptiveRendering="true" Style="padding: 4px; ">

                <FluentGridItem lg="1" xs="12" Style="margin-top: 0px;">
                
                       <TaskIconButton OnClick="Back" 
                            IconStart="@(new Icons.Regular.Size24.ArrowCircleLeft())" >

                       </TaskIconButton>

                </FluentGridItem>

                <FluentGridItem lg="9" xs="12">
                        <FluentLabel> <h4>@view.ModoLabel</h4> </FluentLabel>

                </FluentGridItem>
                
            </FluentGrid>

            <FluentCard Width="100%" Height="100%" Class="card-layout">

                <FluentTextField @bind-Value=view.result.RoleName Maxlength="100"
                                 Label="@view.texts.Get("RoleName-Label")" style="width:50%">
                </FluentTextField>
                <FluentLabel> @view.GetSummaryMessage("RoleName") </FluentLabel>
                                           

                <FluentSwitch @bind-Value=@view.result.IsActive  >
                    @view.texts.Get("Active-Label")
                </FluentSwitch>                                                                          
                

            </FluentCard>
              
        }
    }
    else
    {

        <FluentStack Style="margin-bottom: 24px;"
                        VerticalAlignment="VerticalAlignment.Center"
                        HorizontalAlignment="HorizontalAlignment.Center">
            <PageLoading LoadingText="Loading page. Wait..."></PageLoading>

        </FluentStack>

    }
      
    <TaskLoading @ref="loading"></TaskLoading>

@code {

    
    DataGridRowSize rowSize = DataGridRowSize.Medium;    
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected TaskLoading loading;
    private RoleViewModel view;

    //



    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            if (await this.InitResources())
            {
                await this.InitCacheAndLocalization();

                this.InitServices();

                view = new RoleViewModel((_systemservices as SystemProxy),
                   (_cache as DataCacheProxy), user, _httpclient, _settings.ServiceURL, _appctrl.UserInfo.Token);

                view.texts = this.localization;

                view.Permissions
                    = BaseViewModel.SetPermissions(permissions, "SYSROLE", false);

                await view.InitializeModels();

                _LoadingData_Text = view.texts.Get("LoadingData");                
                _AreaURL = "superadmin"; 
                _msgYes = view.texts.Get("Yes-Text");
                _msgNo = view.texts.Get("No-Text");
                this.SetPageTile(view.texts.Get("Role-PageTitle"));
            }

            StateHasChanged();

        }
    }



    public async Task OnSearch()
    {        
        await view.Search();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("ErrorOnExecuteSearch"));

        }
        
    }

    public void OnNew()
    {

        view.InitNew();
        StateHasChanged();
    }

    public async Task OnGet(object id)
    {
        await loading.Begin();

        await view.Get(id);

        await loading.End();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("ErrorOnReturnData"));
            
        }
        else
        {
            view.InitEdit();

        }

        StateHasChanged();
    }


    public async Task OnSet()
    {
        
        await view.Set();

        if (!view.ServiceStatus.Success)
        {
            await msgbox.ShowWarningAsync(view.ServiceStatus.Exceptions.Messages[0].Description,
                view.texts.Get("NoticeLabel"));
            
        }
        else
        {
            await msgbox.ShowSuccessAsync(view.texts.Get("SuccessSaveMessage"),
                view.texts.Get("SuccessLabel"));                             
            
                this.Back();            

        }
  

    }

    public async Task OnDetClick(object id)
    {
        await OnGet(id);

    }

    public void Back()
    {
        view.BackToSearch();
        StateHasChanged();

    }

    public void GoHome()
    {
        string url = _appctrl.UserInfo.HomeURL;
        NavigationManager.NavigateTo(url);

    }



}